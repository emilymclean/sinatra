extends "package://components.emilym.cl/actions/actions@0.1.12#/common/build-app-support.pkl"
import "package://components.emilym.cl/actions/actions@0.1.12#/common/common.pkl" as common

hidden modules: List<String>(length == 0) = List()
hidden extraBuildSteps: Listing<Step>

hidden iaToolPath: String? = null
hidden versionNumberOffset = 0
hidden instantVersionNumberOffset = 0
hidden gradleVersionNameName = "version"
hidden gradleVersionCodeName = "versionCode"

hidden releaseTrackPublishingConfiguration: List<AppReleaseDescriptor>(isDistinctBy((e) -> List(e.appModule, e.flavor))) = List()

function debugUniversalBuildDescriptor(_appModule: String) = new BuildDescriptor {
  appModule = _appModule
  variant = "debug"
  release = false
}

hidden apkBuildDescriptors: List<BuildDescriptor> = List(
  debugBuildDescriptor("androidApp"),
  new BuildDescriptor {
    appModule = "androidApp"
    variant = "release"
    release = false
  }
)
hidden aabBuildDescriptors: List<BuildDescriptor> = List(
  releaseBuildDescriptor("androidApp", false)
)

local hasInstant = aabBuildDescriptors.filter((e) -> e.instant).length > 0
local hasAab = aabBuildDescriptors.length > 0
local hasApk = apkBuildDescriptors.length > 0

function buildJob(
  descriptors: List<BuildDescriptor>,
  extension: String,
  command: String,
  postCommand: String,
  fileNameBuilder: (BuildDescriptor) -> String,
  folder: String
) = new Job {
  strategy = new JobStrategy {
    matrix = new Mapping {
      ["build"] = generateMatrixInclude(descriptors, fileNameBuilder, folder)
    }
  }
  needs = new Listing {
    "version"
    ...(
    if (hasInstant)
      new Listing {
        "version-instant"
      }
    else new Listing {}
    )
  }
  steps = new Listing {
    common.checkout
    common.setupJdk
    ...extraBuildSteps
    new CommandStep {
      run = """
        printf "MAPS_API_KEY=${MAPS_API_KEY}" >> secrets.properties
        printf "${GOOGLE_SERVICES_JSON}" >> androidApp/google-services.json
        """
      env {
        ["MAPS_API_KEY"] = "${{ secrets.MAPS_API_KEY }}"
        ["GOOGLE_SERVICES_JSON"] = "${{ secrets.GOOGLE_SERVICES_JSON }}"
      }
    }
    ...common.gradle(
      "Build",
      "${{ matrix.build.module }}:\(command)${{ matrix.build.command }}\(postCommand)",
      new Mapping {
        ["ORG_GRADLE_PROJECT_appVersionName"] = "${{ needs.version.outputs.version }}"
        ["ORG_GRADLE_PROJECT_appVersionCode"] = if (hasInstant)
            "${{ matrix.build.instant && needs.version-instant.outputs.versionCode || needs.version.outputs.versionCode }}"
          else
            "${{ needs.version.outputs.versionCode }}"
      }
    )
    new ActionStep {
      id = "sign"
      uses = "ilharp/sign-android-release@v1"
      name = "Sign app"
      `if` = "${{ matrix.build.release }}"
      with = new Mapping {
        ["releaseDir"] = "${{ matrix.build.path }}"
        ["signingKey"] = "${{ secrets.SIGNING_KEY }}"
        ["keyAlias"] = "${{ secrets.ALIAS }}"
        ["keyStorePassword"] = "${{ secrets.KEY_STORE_PASSWORD }}"
        ["keyPassword"] = "${{ secrets.KEY_PASSWORD }}"
        ["buildToolsVersion"] = "35.0.0"
      }
    }
    new CommandStep {
      name = "Rename \(extension)"
      run = "mv ${{ steps.sign.outputs.signedFile }} ./${{ matrix.build.name }}.\(extension)"
      `if` = "${{ matrix.build.release }}"
    }
    new CommandStep {
      name = "Rename \(extension)"
      run = "mv ${{ matrix.build.path }}/${{ matrix.build.fileName }}.\(extension) ./${{ matrix.build.name }}.\(extension)"
      `if` = "${{ !matrix.build.release }}"
    }
    new ActionStep {
      uses = "actions/upload-artifact@v4"
      with = new Mapping {
        ["name"] = "${{ matrix.build.name }}-\(extension)"
        ["path"] = "./${{ matrix.build.name }}.\(extension)"
      }
    }
    new ActionStep {
      uses = "actions/upload-artifact@v4"
      `if` = "matrix.build.hasMappingFile"
      with = new Mapping {
        ["name"] = "${{ matrix.build.name }}-\(extension)-mapping"
        ["path"] = "${{ matrix.build.mappingFile }}"
      }
    }
  }
}

function releaseJob(
  descriptors: List<BuildDescriptor>,
  extension: String
) = new Job {
  strategy = new JobStrategy {
    matrix = new Mapping {
      ["build"] = generateMatrixInclude(descriptors, defaultFileName, "")
    }
  }
  needs = new Listing {
    "version"
    "release"
    "build-\(extension)"
  }
  steps = new Listing {
    new ActionStep {
      uses = "actions/download-artifact@v4"
      with = new Mapping {
        ["name"] = "${{ matrix.build.name }}-\(extension)"
        ["path"] = "./"
      }
    }
    new ActionStep {
      uses = "actions/download-artifact@v4"
      `if` = "matrix.build.hasMappingFile"
      with = new Mapping {
        ["name"] = "${{ matrix.build.name }}-\(extension)-mapping"
        ["path"] = "./"
      }
    }
    new ActionStep {
      name = "Upload Artifact to Release"
      uses = "shogo82148/actions-upload-release-asset@v1"
      env = new Mapping {
        ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
      }
      with = new Mapping {
        ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
        ["asset_path"] = "./${{ matrix.build.name }}.\(extension)"
        ["asset_name"] = "sinatra-android-${{ matrix.build.variant }}-v${{ needs.version.outputs.version }}.\(extension)"
        ["asset_content_type"] = "application/zip"
      }
    }
    new ActionStep {
      name = "Upload Artifact to Release"
      uses = "shogo82148/actions-upload-release-asset@v1"
      `if` = "matrix.build.hasMappingFile"
      env = new Mapping {
        ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
      }
      with = new Mapping {
        ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
        ["asset_path"] = "./mapping.txt"
        ["asset_name"] = "mapping-sinatra-android-${{ matrix.build.variant }}-v${{ needs.version.outputs.version }}.txt"
        ["asset_content_type"] = "text/plain"
      }
    }
  }
}

hidden defaultFileName = (descriptor: BuildDescriptor) -> descriptor.fileName

function generateMatrixInclude(
  descriptors: List<BuildDescriptor>,
  fileNameBuilder: (BuildDescriptor) -> String,
  folder: String
): Listing<Mapping<String, Any>> = new Listing {
  for (descriptor in descriptors) {
    new Mapping {
      ["module"] = descriptor.appModule
      ["command"] = descriptor.full
      ["variant"] = descriptor.variant
      ["flavor"] = descriptor.flavor
      ["release"] = descriptor.release
      ["path"] = descriptor.path(folder)
      ["fileName"] = fileNameBuilder.apply(descriptor)
      ["name"] = descriptor.artifactName
      ["instant"] = descriptor.instant
      ["hasMappingFile"] = descriptor.hasMappingFile
      ["mappingFile"] = descriptor.mappingFile
    }
  }
}

function extractApksFromAAB(extraArgs: Listing<String>) =
  let (args =
    (new Listing<String> {
      "java -jar bundletool.jar build-apks"
      "--ks=temp.keystore"
      "--ks-key-alias=${{ secrets.ALIAS }}"
      "--ks-pass=pass:${{ secrets.KEY_STORE_PASSWORD }}"
      "--key-pass=pass:${{ secrets.KEY_PASSWORD }}"
      "--bundle=\"./${{ matrix.build.name }}.aab\""
      "--output=\"${{ matrix.build.name }}.apks\""
    }.toList() + extraArgs.toList()).join(" \\\n")
  )
    new Listing {
      downloadBundletool
      new CommandStep {
        name = "Setup keystore"
        run = """
          echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > temp.keystore
          """
      }
      new CommandStep {
        name = "Extract apks from aab"
        run = args
      }
      new CommandStep {
        name = "Cleanup keystore"
        run = """
          rm temp.keystore
          """
      }
    }

hidden downloadBundletool = new CommandStep {
  name = "Download bundletool"
  run = """
    wget -q https://github.com/google/bundletool/releases/download/1.17.2/bundletool-all-1.17.2.jar -O bundletool.jar
    """
}

name = "Build App"

on = new On {
  push = new Push {
    branches = new Listing {
      "main"
      "develop"
      "release/**"
    }
  }
  pull_request = new PullRequest {
    branches = new Listing {
      "main"
      "develop"
    }
  }
}

permissions = new Mapping {
  ["contents"] = "write"
}

jobs = new Mapping {
  ["version"] = new Job {
    outputs = new Mapping {
      ["version"] = "${{ steps.gitversion.outputs.semVer }}"
      ["versionIOS"] = "${{ steps.gitversion.outputs.majorMinorPatch }}"
      ["versionCode"] = "${{ steps.run-number.outputs.versionCode }}"
    }
    steps = new Listing {
      common.checkout
      new ActionStep {
        name = "Install GitVersion"
        uses = "gittools/actions/gitversion/setup@v3.0.0"
        with = new Mapping {
          ["versionSpec"] = "5.x"
        }
      }
      new ActionStep {
        name = "Use GitVersion"
        id = "gitversion"
        uses = "gittools/actions/gitversion/execute@v3.0.0"
        with = new Mapping {
          ["useConfigFile"] = true
          ["configFilePath"] = "./gitversion.yml"
        }
      }
      new CommandStep {
        id = "run-number"
        run = """
          current_run_number=${{ github.run_number }}
          new_number=$((current_run_number+\(versionNumberOffset)))
          echo "versionCode=${new_number}" >> $GITHUB_OUTPUT
          """
      }
      new CommandStep {
        name = "Generate Job Summary"
        run = "echo \"# Version Info\nSemantic Version: ${{ steps.gitversion.outputs.semVer }}\niOS Version: ${{ steps.gitversion.outputs.majorMinorPatch }}\nVersion Number: ${{ steps.run-number.outputs.versionCode }}\" >> $GITHUB_STEP_SUMMARY"
      }
    }
  }
  ...(
  if (hasInstant)
    new Mapping {
      ["version-instant"] = common.version(instantVersionNumberOffset)
    }
  else new Mapping {}
  )
  ...(
  if (hasApk)
    new Mapping {
      ["build-apk"] = buildJob(
        apkBuildDescriptors,
        "apk",
        "package",
        "UniversalApk",
        (descriptor: BuildDescriptor) -> List(
          descriptor.appModule.split(":").last,
          descriptor.flavor,
          descriptor.variant,
          "universal",
          if (descriptor.variant == "release" && !descriptor.release) "unsigned" else null
        ).filterNonNull().join("-"),
        "apk_from_bundle"
      )
      ["publish-apk-to-release"] = releaseJob(
        apkBuildDescriptors,
        "apk"
      )
    }
  else new Mapping {}
  )
  ...(
  if (hasAab)
    new Mapping {
      ["build-aab"] = buildJob(
        aabBuildDescriptors,
        "aab",
        "bundle",
        "",
        defaultFileName,
        "bundle"
      )
    }
  else new Mapping {}
  )
  ["release"] = new Job {
    needs = new Listing {
      "version"
    }
    `if` = "github.event_name != 'pull_request'"
    permissions = new Mapping {
      ["contents"] = "write"
    }
    outputs = new Mapping {
      ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
    }
    steps = new Listing {
      common.checkout
      ...common.create_release
    }
  }
  ["build-ipa"] = new Job {
    needs = new Listing {
      "version"
    }
    `if` = "github.event_name != 'pull_request' && github.ref == 'refs/heads/main'"
    `runs-on` = "macos-latest"
    steps = new Listing {
      common.checkout
      common.setupJdk
      new ActionStep {
        uses = "ruby/setup-ruby@v1"
        with {
          ["ruby-version"] = "3.3"
        }
      }
      new ActionStep {
        name = "Setup gradle"
        uses = "gradle/actions/setup-gradle@v3"
      }
      new CommandStep {
        run = """
          mkdir -p iosApp/iosApp/Firebase
          printf "${GOOGLE_SERVICES_PLIST_DEBUG}" >> iosApp/iosApp/Firebase/GoogleService-Info-Debug.plist
          printf "${GOOGLE_SERVICES_PLIST}" >> iosApp/iosApp/Firebase/GoogleService-Info-Release.plist
          """
        env {
          ["GOOGLE_SERVICES_PLIST_DEBUG"] = "${{ secrets.GOOGLE_SERVICES_PLIST_DEBUG }}"
          ["GOOGLE_SERVICES_PLIST"] = "${{ secrets.GOOGLE_SERVICES_PLIST }}"
        }
      }
      new CommandStep {
        name = "Update version number"
        run = """
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ needs.version.outputs.versionIOS }}" iosApp/iosApp/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ needs.version.outputs.versionCode }}" iosApp/iosApp/Info.plist
          """
      }
      new CommandStep {
        name = "Install cocoapods"
        run = """
          gem install cocoapods
          ./gradlew :ui:generateDummyFramework
          ./gradlew :shared:generateDummyFramework
          cd iosApp && pod install
          """
      }
      new ActionStep {
        name = "Build iOS App"
        uses = "yukiarrr/ios-build-action@v1.12.0"
        with = new Mapping {
          ["project-path"] = "iosApp/Sinatra.xcodeproj"
          ["workspace-path"] = "iosApp/iosApp.xcworkspace"
          ["p12-base64"] = "${{ secrets.P12_CERTIFICATE }}"
          ["certificate-password"] = "${{ secrets.P12_CERTIFICATE_PASSWORD }}"
          ["mobileprovision-base64"] = "${{ secrets.MOBILE_PROVISION }}"
          ["code-signing-identity"] = "${{ secrets.CODE_SIGNING_IDENTITY }}"
          ["team-id"] = "${{ secrets.TEAM_ID }}"
        }
      }
      new CommandStep {
        name = "Rename ipa"
        run = "mv output.ipa ./iosApp.ipa"
      }
      new ActionStep {
        uses = "actions/upload-artifact@v4"
        with = new Mapping {
          ["name"] = "iosApp-release-ipa"
          ["path"] = "./iosApp.ipa"
        }
      }
    }
  }
}